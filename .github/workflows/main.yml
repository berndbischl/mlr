on:
  push:
  pull_request:
  # for now, CRON jobs only run on the default branch of the repo (i.e. usually on master)
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 3 * * *"

name: GH Actions via {tic}

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-latest, r: "release" }
          - { os: macOS-latest, r: "devel" }
          - { os: ubuntu-18.04, r: "release" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_MAX_NUM_DLLS: 999
      CRAN: ${{ matrix.config.cran }}
      # we are not allowed to write to ~/.ccache, just read
      CCACHE_BASEDIR: ${{ GITHUB.WORKSPACE }}
      CCACHE_DIR: ${{ GITHUB.WORKSPACE }}/.ccache
      CCACHE_NOHASHDIR: true
      CCACHE_SLOPPINESS: include_file_ctime
      RGL_USE_NULL: true

    steps:
      - uses: actions/checkout@v1

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          Ncpus: 4

      # LaTeX. Installation time:
      # Linux: ~ 1 min
      # macOS: ~ 1 min 30s
      # Windows: never finishes
      - uses: r-lib/actions/setup-tinytex@v1
        if: runner.os != 'Windows'

      - uses: r-lib/actions/setup-pandoc@master

      # set current date for use in cache creation
      # https://github.community/t5/GitHub-Actions/How-to-set-and-access-a-Workflow-variable/m-p/42970
      - name: "[Cache] Prepare daily timestamp for cache"
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date '+%d-%m')"

      - name: "[Cache] Prepare weekly timestamp for cache"
        if: runner.os != 'Windows'
        id: datew
        run: echo "::set-output name=datew::$(date '+%Y-%V')"
      #
      # - name: "[Cache] Cache R packages"
      #   uses: actions/cache@v1.1.0
      #   with:
      #     path: ${{ env.R_LIBS_USER }}
      #     key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}
      #     restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}

      - name: "[Cache] Cache ccache"
        if: runner.os != 'Windows'
        uses: actions/cache@v1.1.0
        with:
          path: ${{ env.CCACHE_DIR}}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-test6-${{steps.datew.outputs.datew}}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-test6-${{steps.datew.outputs.datew}}

      - name: "[Linux] ccache"
        if: runner.os == 'Linux'
        run: |
          sudo apt install ccache
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars
          mkdir -p ~/.ccache && echo -e 'max_size = 5.0G\nsloppiness = include_file_ctime\nhash_dir=false' > $HOME/.ccache/ccache.conf

      - name: "[macOS] ccache"
        if: runner.os == 'macOS'
        run: |
          brew install ccache
          mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache /usr/local/opt/llvm/bin/clang\nCXX=/usr/local/opt/llvm/bin/clang++\nCXX1X=/usr/local/opt/llvm/bin/clang++\nCXX14=ccache clang++ -std=gnu99\nC11=ccache clang++\nC14=ccache clang++\nFC=ccache gfortran\nF77=ccache gfortran\nLDFLAGS=-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib' > $HOME/.R/Makevars
          mkdir -p ~/.ccache && echo -e 'max_size = 5.0G\nsloppiness = include_file_ctime\nhash_dir=false' > $HOME/.ccache/ccache.conf

      # Installs system libs listed in the 'SystemRequirements' field in DESCRIPTION
      # FIXME: Also o nlinux not usable due to broken java-7-headless which comes with almost every formula
      # - name: Install system dependencies
      #   if: runner.os == 'Linux'
      #   env:
      #     RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
      #   run: |
      #     Rscript -e "if (!requireNamespace('remotes')) {install.packages('remotes')}"
      #     Rscript -e "remotes::install_github('r-hub/sysreqs')"
      #     sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
      #     sudo -s eval "$sysreqs"

      # only on macOS devel, using binaries on release
      # need to set pkgType env var, otherwise remotes::install_cran() errors
      # because R tries to install binaries for R-devel which do not exist

      # - name: "[Windows] Prepare"
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install miktex
      #     choco install jdk8

      - name: "[macOS] Prepare"
        if: runner.os == 'macOS'
        run: |
          R CMD javareconf
          rm '/usr/local/bin/gfortran'
          brew tap osgeo/osgeo4mac
          brew install Caskroom/cask/xquartz udunits gdal
          brew unlink proj
          brew install osgeo-proj@5 geos freetype
          brew link --force osgeo-proj@5

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v1

      - name: "[Linux] Prepare"
        if: runner.os == 'Linux'
        run: |
          sudo R CMD javareconf
          sudo apt install -y ccache libglu1-mesa-dev libgmp-dev libgs-dev libgdal-dev libproj-dev libgeos-dev libudunits2-dev jags

      # for some strange Windows reason this step and the next one need to be decoupled
      - name: "[Stage] Prepare"
        run: |
          Rscript -e "if (!requireNamespace('remotes')) install.packages('remotes')"
          Rscript -e "if (getRversion() < '3.2' && !requireNamespace('curl')) install.packages('curl')"

      - name: "[Stage] Install"
        if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
        run: |
          Rscript -e "remotes::install_github('ropensci/tic@gh-actions')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: "[Stage] Install (macOS-devel)"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'devel'
        env:
          pkgType: source
        run: |
          Rscript -e "remotes::install_github('ropensci/tic@gh-actions')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: "[Stage] Script"
        run: Rscript -e 'tic::script()'

      - name: "[Stage] After Success"
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == '3.6'
        run: Rscript -e "tic::after_success()"

      - name: "[Stage] Upload R CMD check artifacts"
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
