% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/updateModel.R
\name{updateModel}
\alias{updateModel}
\title{Update a model}
\usage{
updateModel(object, task, newdata, subset, weights = NULL, ...)
}
\arguments{
\item{object}{\link{\code{\link{WrappedModel}}}\cr
Wrapped model, result of \code{\link{train}}.}

\item{task}{\link{\code{\link{Task}}}\cr
The task.}

\item{newdata}{\link{\code{data.frame}}\cr
New observations to update the model}

\item{subset}{([integer] | [logical] | `NULL`)\cr
Selected cases. Either `character(1)` logical or an index vector.
By default `NULL` if all observations are used.}

\item{weights}{\link{\code{numeric}}\cr
Optional, non-negative case weight vector to be used during fitting.
If given, must be of same length as \code{subset} and in corresponding order.
By default \code{NULL} which means no weights are used unless specified in the task (\code{\link{Task}}).
Weights from the task will be overwritten.}

\item{...}{\link{any}\cr
Currently ignored.}
}
\value{
\link{\code{\link{WrappedModel}}}.
}
\description{
Update a fitted model with new data.
The row names of the input \code{task} or \code{newdata} are preserved in the output.
}
\examples{
dat = data.frame(arma_test = arima.sim(model = list(ar = c(.5,.2),
 ma = c(.4), order = c(2,0,1)), n = 100))
dat$dates =  as.POSIXct("1992-01-14") + 0:99
Timeregr.task = makeForecastRegrTask(id = "test", data = dat,
target = "arma_test", frequency = 1L, date.col = "dates")
arm = makeLearner("fcregr.Arima", h = 1)
trn = train(arm,Timeregr.task, subset = 1:99)
armNew =updateModel(trn, Timeregr.task, newdata = dat[100,])
}
