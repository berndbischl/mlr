% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BoostedStacking.R
\name{makeBoostedStackingLearner}
\alias{makeBoostedStackingLearner}
\title{Create a BoostedStacking object.}
\usage{
makeBoostedStackingLearner(model.multiplexer, mm.ps, control,
  resampling = cv2, predict.type = "prob", measures, niter = 2L,
  tolerance = -0.1, subsemble.prop = 0.8)
}
\arguments{
\item{model.multiplexer}{[\code{\link{ModelMultiplexer}}]\cr
The multiplexer learner.}

\item{mm.ps}{Collection of parameters and their constraints for optimization.
Dependent parameters with a \code{requires} field must use \code{quote} and not
\code{expression} to define it.}

\item{control}{[\code{\link{TuneControlRandom}}]\cr
Control object for search method.}

\item{resampling}{[\code{\link{ResampleDesc}} \cr
Resampling strategy.}

\item{predict.type}{[\code{character(1)}]\cr 
Classification: \dQuote{response} (= labels) or \dQuote{prob} (= probabilities and labels by selecting the ones with maximal probability).
Regression: \dQuote{response} (= mean response) or \dQuote{se} (= standard errors and mean response).
par.set [\code{\link[ParamHelpers]{ParamSet}}]\cr}

\item{measures}{[\code{\link{Measure}}]\cr
Performance measures.}

\item{niter}{[\code{integer}]\cr
Number of boosting iterations.}

\item{tolerance}{[\code{numeric}]\cr
Tolerance for stopping criterion.}

\item{subsemble.prop}{[\code{numeric}]\cr 
Proportion of data where tuning is run on.}
}
\description{
A boosted stacking learner runs a tuning using a \code{\link{ModelMultiplexer}} and adds the predictions from the best model as a new feature to the training data set. This procedure is repleated several times until \code{niter} is reached.
}
\examples{
\dontrun{
lrns = list(
  #makeLearner("classif.ksvm", kernel = "rbfdot"), # no implm for response and multiclass
  makeLearner("classif.gbm"),
  makeLearner("classif.randomForest"))
mm = makeModelMultiplexer(lrns)
ctrl = makeTuneControlRandom(maxit = 3L)
ps = makeModelMultiplexerParamSet(mm,
  makeIntegerParam("n.trees", lower = 1L, upper = 500L),
  makeIntegerParam("interaction.depth", lower = 1L, upper = 10L),
  makeIntegerParam("ntree", lower = 1L, upper = 500L),
  makeIntegerParam("mtry", lower = 1L, upper = getTaskNFeats(pid.task)))
lrns = lapply(lrns, setPredictType, "prob")
stb = makeBoostedStackingLearner(model.multiplexer = mm,
  predict.type = "prob", resampling = cv5, mm.ps = ps, control = ctrl,
  measures = mmce, niter = 2L)
r = resample(stb, task = pid.task, resampling = cv2)
}
}

