% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/MultilabelStackingWrapper.R
\name{makeMultilabelStackingWrapper}
\alias{makeMultilabelStackingWrapper}
\title{Use stacking method (stacked generalization) to create a multilabel learner.}
\usage{
makeMultilabelStackingWrapper(learner, level1Learner = learner,
  cv.folds = 2)
}
\arguments{
\item{cv.folds}{The number of folds for the inner cross validation to predict labels for the augmented feature space. Default is \code{2}.}
}
\value{
[\code{\link{Learner}}].
}
\description{
Every learner which is implemented in mlr and which supports binary
classification can be converted to a wrapped stacking multilabel learner.
Stacking trains a binary classifier for each label using predicted label information of all labels
(by cross validation) as additional features.
During prediction these labels need to be predicted by the level-1 learner.

Models can easily be accessed via \code{\link{getLearnerModel}}.
}
\examples{
d = getTaskData(yeast.task)
# drop some labels so example runs faster
d = d[, c(1:3, 15:117)]
task = makeMultilabelTask(data = d, target = c("label1", "label2", "label3"))
lrn = makeMultilabelStackingWrapper("classif.rpart", level1Learner = "classif.rpart")
lrn = setPredictType(lrn, "prob")
# train, predict and evaluate
mod = train(lrn, task)
pred = predict(mod, task)
p = performance(pred)
performance(pred, measure = hamloss)
getMultilabelBinaryPerformances(pred, measures = list(mmce, auc))
# above works also with predictions from resample!
}
\references{
Montanes, E. et al. (2013)
\emph{Dependent binary relevance models for multi-label classification}
Artificial Intelligence Center, University of Oviedo at Gijon, Spain.
}
\seealso{
Other multilabel: \code{\link{getMultilabelBinaryPerformances}};
  \code{\link{makeMultilabelBinaryRelevanceWrapper}};
  \code{\link{makeMultilabelClassifierChainsWrapper}};
  \code{\link{makeMultilabelDBRWrapper}};
  \code{\link{makeMultilabelNestedStackingWrapper}}

Other wrapper: \code{\link{CostSensClassifModel}},
  \code{\link{CostSensClassifWrapper}},
  \code{\link{makeCostSensClassifWrapper}};
  \code{\link{CostSensRegrModel}},
  \code{\link{CostSensRegrWrapper}},
  \code{\link{makeCostSensRegrWrapper}};
  \code{\link{makeBaggingWrapper}};
  \code{\link{makeDownsampleWrapper}};
  \code{\link{makeFeatSelWrapper}};
  \code{\link{makeFilterWrapper}};
  \code{\link{makeImputeWrapper}};
  \code{\link{makeMulticlassWrapper}};
  \code{\link{makeMultilabelBinaryRelevanceWrapper}};
  \code{\link{makeMultilabelClassifierChainsWrapper}};
  \code{\link{makeMultilabelDBRWrapper}};
  \code{\link{makeMultilabelNestedStackingWrapper}};
  \code{\link{makeOverBaggingWrapper}};
  \code{\link{makeOversampleWrapper}},
  \code{\link{makeUndersampleWrapper}};
  \code{\link{makePreprocWrapperCaret}};
  \code{\link{makePreprocWrapper}};
  \code{\link{makeSMOTEWrapper}};
  \code{\link{makeTuneWrapper}};
  \code{\link{makeWeightedClassesWrapper}}
}

